<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo</title>
    <link href="/2022/11/03/Hexo/Hexo/"/>
    <url>/2022/11/03/Hexo/Hexo/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs swift">hexo n <span class="hljs-string">&quot;博客名称&quot;</span>  <span class="hljs-operator">=&gt;</span> hexo new <span class="hljs-string">&quot;博客名称&quot;</span>   #这两个都是创建新文章，前者是简写模式<br>hexo p  <span class="hljs-operator">=&gt;</span> hexo publish<br>hexo g  <span class="hljs-operator">=&gt;</span> hexo generate  #生成<br>hexo s  <span class="hljs-operator">=&gt;</span> hexo server  #启动服务预览<br>hexo d  <span class="hljs-operator">=&gt;</span> hexo deploy  #部署  <br><br>hexo server   #<span class="hljs-type">Hexo</span> 会监视文件变动并自动更新，无须重启服务器<span class="hljs-operator">。</span><br>hexo server <span class="hljs-operator">-</span>s   #静态模式<br>hexo server <span class="hljs-operator">-</span>p <span class="hljs-number">5000</span>   #更改端口<br>hexo server <span class="hljs-operator">-</span>i <span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span>   #自定义<span class="hljs-type">IP</span><br>hexo clean   #清除缓存，网页正常情况下可以忽略此条命令<br>hexo g   #生成静态网页<br>hexo d   #开始部署<br></code></pre></td></tr></table></figure><p>title: YoYo #网站标题<br>subtitle: ‘Happy learning swift’<br>description: ‘’<br>keywords:<br>author: YoYo<br>language:  zh-CN  #en<br>timezone: ‘Asia&#x2F;Shanghai#网站时区’  #网站时区</p><p>deploy:<br>    type: ‘git’<br>    repo: <a href="mailto:&#103;&#x69;&#116;&#64;&#x67;&#x69;&#116;&#104;&#117;&#98;&#x2e;&#99;&#x6f;&#x6d;">&#103;&#x69;&#116;&#64;&#x67;&#x69;&#116;&#104;&#117;&#98;&#x2e;&#99;&#x6f;&#x6d;</a>:YoSwiftDemo&#x2F;YoSwiftDemo.github.io.git<br>    branch: main</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Protocol协议基础</title>
    <link href="/2022/11/02/Grammar/Protocol/"/>
    <url>/2022/11/02/Grammar/Protocol/</url>
    
    <content type="html"><![CDATA[<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><blockquote><p>协议的语法格式</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//协议的语法格式</span><br><span class="hljs-keyword">protocol</span> <span class="hljs-title class_">MyProtocol</span> &#123;<br>    <span class="hljs-comment">//body</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>class、struct、enum 都可以遵守协议，如果需要遵守多个协议，可以使用逗号分隔</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">OneClass</span>: <span class="hljs-title class_">Protocol1</span>, <span class="hljs-title class_">Protocol2</span> &#123;<br> <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>class中有superClass，一般是放在遵守的协议之前</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">OneClass</span>: <span class="hljs-title class_">Protocol1</span>, <span class="hljs-title class_">Protocol2</span> &#123;<br> <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="协议中添加属性"><a href="#协议中添加属性" class="headerlink" title="协议中添加属性"></a>协议中添加属性</h2><ul><li>属性必须明确是可读的&#x2F;可读可写的</li><li>变量属性 用var而不是let</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs swift"> <span class="hljs-keyword">protocol</span> <span class="hljs-title class_">OneProtocol</span> &#123;<br>    <span class="hljs-keyword">var</span> age: <span class="hljs-type">Int</span> &#123;<span class="hljs-keyword">get</span> <span class="hljs-keyword">set</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="协议中定义方法"><a href="#协议中定义方法" class="headerlink" title="协议中定义方法"></a>协议中定义方法</h2><ul><li>在协议中定义方法，只需要定义当前方法的<code>名称</code>、<code>参数列表</code>和<code>返回值</code></li><li>在具体的类中遵守协议，并实现协议中的方法</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">protocol</span> <span class="hljs-title class_">OneProtocol</span> &#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">doSomething</span>()<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">teach</span>()<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>: <span class="hljs-title class_">OneProtocol</span>&#123;<br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">doSomething</span>() &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;func doSomething&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">teach</span>() &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;teach&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> t <span class="hljs-operator">=</span> <span class="hljs-type">Teacher</span>()<br>t.doSomething()<br><span class="hljs-type">Teacher</span>.teach()<br></code></pre></td></tr></table></figure><blockquote><p>协议中也可以定义初始化方法<br>实现初始化器时，必须使用<code>required</code>关键字</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">protocol</span> <span class="hljs-title class_">OneProtocol</span> &#123;<br>    <span class="hljs-keyword">init</span>(<span class="hljs-params">age</span>: <span class="hljs-type">Int</span>)<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>: <span class="hljs-title class_">OneProtocol</span>&#123;<br>    <span class="hljs-keyword">var</span> age: <span class="hljs-type">Int</span><br>    <span class="hljs-keyword">required</span> <span class="hljs-keyword">init</span>(<span class="hljs-params">age</span>: <span class="hljs-type">Int</span>) &#123;<br>        <span class="hljs-keyword">self</span>.age <span class="hljs-operator">=</span> age<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://juejin.cn/post/7001872073253453838">https://juejin.cn/post/7001872073253453838</a></p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p><a href="https://www.legendsmb.com/2020/05/03/xo%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/">https://www.legendsmb.com/2020/05/03/xo%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</a></p>]]></content>
    
    
    <categories>
      
      <category>Grammar</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
